import java.awt.FileDialog;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;

public class NotePad
{
	// 프레임 선언
	JFrame jFrame = new JFrame("Simple WinMerge");
	
	// Swing에서의 텍스트 영역.. 스크롤바가 존재하지 않는다.
	JPanel p1 = new JPanel();	
	
	JTextArea textArea = new JTextArea("", 0, 0);// 스크롤바 없음
	JTextArea textArea2 = new JTextArea("", 0,0);
	

	// Swing에서 스크롤바를 넣기 위해 아래와 같이 사용한다.
	JScrollPane jp = new JScrollPane(textArea);// 스크롤바 만들기
	
	JScrollPane jp2 = new JScrollPane(textArea2);

	// 메뉴 선언
	JMenuBar menuBar = new JMenuBar();
	JMenu fileMenu = new JMenu("File(F)");
	JMenu editMenu = new JMenu("Edit(E)");
	JMenu compareMenu = new JMenu("Compare(C)");
	JMenu mergeMenu = new JMenu("Merge(M)");	
	JMenu helpMenu = new JMenu("Help(I)");
	
	public NotePad()
	{
		//p1.add(textArea);
		//p1.add(textArea2);
		
		// 파일 메뉴 생성
		fileMenu.add(new JMenuItem("Left File Open"));
		fileMenu.getItem(0).setAccelerator(KeyStroke.getKeyStroke('L', InputEvent.ALT_MASK));
		
		fileMenu.addSeparator(); //구분선 추가
		fileMenu.add(new JMenuItem("Right File Open"));
		fileMenu.getItem(2).setAccelerator(KeyStroke.getKeyStroke('R', InputEvent.ALT_MASK));
		
		fileMenu.addSeparator(); //구분선 추가
		fileMenu.add(new JMenuItem("Exit"));
		fileMenu.getItem(4).setAccelerator(KeyStroke.getKeyStroke('X', InputEvent.ALT_MASK));
		
		// 편집 메뉴 생성
		editMenu.add(new JMenuItem("Start Edit"));
		editMenu.getItem(0).setAccelerator(KeyStroke.getKeyStroke('O', InputEvent.ALT_MASK));
		
		editMenu.addSeparator(); //구분선 추가
		editMenu.add(new JMenuItem("Left file Save"));
		editMenu.getItem(2).setAccelerator(KeyStroke.getKeyStroke('L', InputEvent.ALT_MASK));

		editMenu.addSeparator(); //구분선 추가
		editMenu.add(new JMenuItem("Right file Save"));
		editMenu.getItem(4).setAccelerator(KeyStroke.getKeyStroke('R', InputEvent.ALT_MASK));
		// 비교 메뉴 생성
		compareMenu.add(new JMenuItem("Start comparing"));
		//compareMenu.getItem(0).setAccelerator(KeyStroke.getKeyStroke('O', InputEvent.ALT_MASK));
		
		//compareMenu.addSeparator(); //구분선 추가
		//compareMenu.add(new JMenuItem("종료"));
		//compareMenu.getItem(2).setAccelerator(KeyStroke.getKeyStroke('X', InputEvent.ALT_MASK));

		// 머지 메뉴 생성
		mergeMenu.add(new JMenuItem("> (Merge to right)"));
		//mergeMenu.getItem(0).setAccelerator(KeyStroke.getKeyStroke('O', InputEvent.ALT_MASK));
		
		mergeMenu.addSeparator(); //구분선 추가
		mergeMenu.add(new JMenuItem("< (Merge to left)"));
		//mergeMenu.add(new JMenuItem("종료"));
		//mergeMenu.getItem(2).setAccelerator(KeyStroke.getKeyStroke('X', InputEvent.ALT_MASK));

		// 도움 메뉴 생성
		helpMenu.add(new JMenuItem("Information"));

		// 메뉴를 메뉴바에 등록
		menuBar.add(fileMenu);
		menuBar.add(editMenu);
		menuBar.add(compareMenu);
		menuBar.add(mergeMenu);
		menuBar.add(helpMenu);

		// 메뉴바 추가
		jFrame.setJMenuBar(menuBar);
		
		// 메뉴 단축키 지정
		fileMenu.setMnemonic('F');
		editMenu.setMnemonic('E');
		compareMenu.setMnemonic('C');
		mergeMenu.setMnemonic('M');
		helpMenu.setMnemonic('I');
		
		jFrame.setLayout(new GridLayout(1,2));

		// 텍스트 영역 추가
		//jFrame.add(jp, "Center");
		jFrame.add(jp);
		jFrame.add(jp2);

		
		// 프레임 크기 및 보이기 설정
		jFrame.setSize(700, 700);
		jFrame.setVisible(true);

		// swing에만 있는 X버튼 클릭시 종료
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		
		//왼쪽 파일 열기
		fileMenu.getItem(0).addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				Load load = new Load();
				load.Load_file();
				print_Leftfile(load.info.get_dir(), load.info.get_filename());	  
 			}			
		});
		
		//오른쪽 파일 열기
		fileMenu.getItem(2).addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e){
				Load load = new Load();
				load.Load_file();
				print_Rightfile(load.info.get_dir(), load.info.get_filename());
			}
		});
		
		/* Editmenu Listener */
		editMenu.getItem(2).addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//저장 다이얼로그 띄우기
				FileDialog save = new FileDialog(NotePad.this.jFrame, "Save mode", FileDialog.SAVE);
				save.setVisible(true); 
				
				
				if(save.getFile() != null) //파일을 선택했을 경우에만 저장
				{
					FileWriter fileWriter = null;
					BufferedWriter bufferedWriter = null;
					
					try
					{
						fileWriter = new FileWriter(save.getDirectory() + save.getFile());
						bufferedWriter = new BufferedWriter(fileWriter);
						
						bufferedWriter.write(NotePad.this.textArea.getText());	
					}
					catch (Exception fileReadError)
					{
						System.out.println("오류" + fileReadError);
					}
					finally
					{
						try
						{
							bufferedWriter.close();
						}
						catch (Exception fileCloseError)
						{
							System.out.println("파일 닫기 오류" + fileCloseError);
						}
					}
					
					NotePad.this.jFrame.setTitle(save.getFile()); //타이틀바에 파일명 나타내기
				}
			}

		});
		
		editMenu.getItem(4).addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//저장 다이얼로그 띄우기
				FileDialog save = new FileDialog(NotePad.this.jFrame, "Save mode", FileDialog.SAVE);
				save.setVisible(true); 
				
				
				if(save.getFile() != null) //파일을 선택했을 경우에만 저장
				{
					FileWriter fileWriter = null;
					BufferedWriter bufferedWriter = null;
					
					try
					{
						fileWriter = new FileWriter(save.getDirectory() + save.getFile());
						bufferedWriter = new BufferedWriter(fileWriter);
						
						bufferedWriter.write(NotePad.this.textArea2.getText());	
					}
					catch (Exception fileReadError)
					{
						System.out.println("오류" + fileReadError);
					}
					finally
					{
						try
						{
							bufferedWriter.close();
						}
						catch (Exception fileCloseError)
						{
							System.out.println("파일 닫기 오류" + fileCloseError);
						}
					}
					
					NotePad.this.jFrame.setTitle(save.getFile()); //타이틀바에 파일명 나타내기
				}
			}

		});
		/*
		//파일 열기 이벤트 추가
		fileMenu.getItem(1).addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e)
			{
				//열기 다이얼로그 띄우기
				FileDialog load = new FileDialog(NotePad.this.jFrame, "열기모드");
				load.setVisible(true); 
				
				
				if(load.getFile() != null) //파일을 선택했을 경우에만 열기
				{
					FileReader fileReader = null;
					BufferedReader bufferedReader = null;
					
					NotePad.this.textArea.setText(null); //메모장 내용 초기화
					
					try
					{
						
						fileReader = new FileReader(load.getDirectory() + load.getFile());
						bufferedReader = new BufferedReader(fileReader);
						
						String string = new String(); //임시 변수
						 
						do
						{
							//한줄씩 읽기
							string = bufferedReader.readLine();
							
							if( string != null )
								NotePad.this.textArea.append(string + "\n");
						}
						while(string != null); //파일 끝이면 null을 반환한다.
						
					}
					catch (Exception fileReadError)
					{
						System.out.println("오류" + fileReadError);
					}
					finally
					{
						try
						{
							bufferedReader.close();
						}
						catch (Exception fileCloseError)
						{
							System.out.println("파일 닫기 오류" + fileCloseError);
						}
					}
						
					NotePad.this.jFrame.setTitle(load.getFile()); //타이틀바에 파일명 나타내기
					NotePad.this.textArea.setCaretPosition(0); //커서 위치 처음으로!
						
				}
			}
			
		});
		*/
		
				//종료 이벤트 추가
		fileMenu.getItem(4).addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e)
			{
				//작성중인 내용이 있으면 종료 전 알림!
				if(NotePad.this.textArea.getText().length() > 0)
				{
					if( JOptionPane.showConfirmDialog(NotePad.this.jFrame, "작성 중인 내용을 취소하고 종료합니다.") == 0 )
					{
						System.exit(0);
					}
				}
				else
				{
					System.exit(0);
				}
			}
			
		});
		
		//버전 이벤트 추가
		helpMenu.getItem(0).addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e)
			{
				//버전 출력
				JOptionPane.showMessageDialog(NotePad.this.jFrame, "Version 0.0.2");
			}
			
		});

		//정보 이벤트 추가
		helpMenu.getItem(1).addActionListener(new ActionListener()
		{
			JDialog jDialog = new JDialog(NotePad.this.jFrame, "메모장 정보");
			JPanel jPanel = new JPanel(new GridLayout(2,1));
			JLabel jLabel01 = new JLabel("작성일 : 2012년 8월 01일");
			JLabel jLabel02 = new JLabel("이름 : 홍길동");
			JButton jButton = new JButton("확인");

			@Override
			public void actionPerformed(ActionEvent e)
			{
				//패널에 라벨 추가
				jPanel.add(jLabel01);
				jPanel.add(jLabel02);
				
				// 다이얼로그에 패널 추가
				jDialog.add(jPanel, "Center");
				
				// 다이얼로그에 버튼 추가
				jDialog.add(jButton, "South");
		 
				// 다이얼로그의 크기와 보기 설정
				jDialog.setSize(300, 200);
				jDialog.setVisible(true);
				
				//X버튼 누르면 다이얼로그만 종료
				jDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				
				jButton.addActionListener(new ActionListener()
				{

					@Override
					public void actionPerformed(ActionEvent e)
					{
						jDialog.dispose(); //닫기
					}
					
				});
			}
			
		});

	}
	
	public void print_Leftfile(String dir, String file_name){
		String temp1; // Schedult.txt파일 한줄 씩 읽어서 임시로 저장하기
		Scanner input = null; // input 선언
		File file = new File(dir + file_name);
		
		try {
			input = new Scanner(file);
		} catch (IOException e) {
			// 예외 발생을 출력문으로 알리고, 더 이상의 프로그램 진행을 포기하도록 Java 문장 추가
			System.out.println("Unknown File");
		}
		while(input.hasNext()){
			temp1 = input.nextLine();
			NotePad.this.textArea.append(temp1);
			NotePad.this.textArea.append("\n");
		}
	}

	public void print_Rightfile(String dir, String file_name){
		String temp1; // Schedult.txt파일 한줄 씩 읽어서 임시로 저장하기
		Scanner input = null; // input 선언
		File file = new File(dir + file_name);
		
		try {
			input = new Scanner(file);
		} catch (IOException e) {
			// 예외 발생을 출력문으로 알리고, 더 이상의 프로그램 진행을 포기하도록 Java 문장 추가
			System.out.println("Unknown File");
		}
		while(input.hasNext()){
			temp1 = input.nextLine();
			NotePad.this.textArea2.append(temp1);
			NotePad.this.textArea2.append("\n");
		}
	}

	/*
	if(NotePad.this.textArea.getText().length() > 0)
	{
		if( JOptionPane.showConfirmDialog(NotePad.this.jFrame, "작성 중인 내용을 취소합니다.") == 0 )
		{
			NotePad.this.textArea.setText(null);
			NotePad.this.jFrame.setTitle("제목없음"); //타이틀바 초기화
			NotePad.this.textArea.setCaretPosition(0); //커서 위치 처음으로!
		}
	}
	else
	{
		NotePad.this.textArea.setText(null);
		NotePad.this.jFrame.setTitle("제목없음"); //타이틀바 초기화
		NotePad.this.textArea.setCaretPosition(0); //커서 위치 처음으로!
	}
	*/
	/*
	//파일 저장 이벤트 추가
	fileMenu.getItem(2).addActionListener(new ActionListener()
	{

		@Override
		public void actionPerformed(ActionEvent e)
		{
			//저장 다이얼로그 띄우기
			FileDialog save = new FileDialog(NotePad.this.jFrame, "저장모드", FileDialog.SAVE);
			save.setVisible(true); 
			
			
			if(save.getFile() != null) //파일을 선택했을 경우에만 저장
			{
				FileWriter fileWriter = null;
				BufferedWriter bufferedWriter = null;
				
				try
				{
					
					fileWriter = new FileWriter(save.getDirectory() + save.getFile());
					bufferedWriter = new BufferedWriter(fileWriter);
					
					bufferedWriter.write(NotePad.this.textArea.getText());
					
				}
				catch (Exception fileReadError)
				{
					System.out.println("오류" + fileReadError);
				}
				finally
				{
					try
					{
						bufferedWriter.close();
					}
					catch (Exception fileCloseError)
					{
						System.out.println("파일 닫기 오류" + fileCloseError);
					}
				}
				
				NotePad.this.jFrame.setTitle(save.getFile()); //타이틀바에 파일명 나타내기
			}
		}
		
	});
	*/

}